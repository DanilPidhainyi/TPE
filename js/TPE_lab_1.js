/*
1) Використовуючи програму генерації випадкових чисел, провести трьохфакторний
експеримент в восьми точках (три стовбці і вісім рядків в матриці планування –
заповнити її випадковими числами). Рекомендовано взяти обмеження до 20 при
генерації випадкових чисел, але врахувати можливість зміни обмеження на вимогу
викладача. Програма створюється на основі будь-якої мови високого рівня.
2) Визначити значення функції відгукув для кожної точки плану за формулою
лінійної регресії:
    Y =a 0 + a 1 X 1 + a 2 X 2 + a 3 X 3 ,
    де a 0 , a 1 , a 2 , a 3 довільно вибрані (для кожного студента різні) коефіцієнти, постійні
протягом усього часу проведення експерименту.
3) Виконати нормування факторів. Визначити значення нульових рівнів факторів.
    Знайти значення відгуку для нульових рівнів факторів і прийняти його за еталонне
У эт .
4) Знайти точку плану, що задовольняє критерію вибору оптимальності (див. табл.1).
Варіанти обираються по номеру в списку в журналі викладача.*/

// Варіант 318  Критерій вибору max(y)

// Матриця факторів
let arr = Array(8).fill(null)
    .map(() => Array(3).fill(null).map(() => Math.floor(Math.random() * 20)));

// a0 - a3
let arr_a = Array(4).fill(null).map(() => Math.floor(Math.random() * 10));

// nun_X -> номер стовбця
x0_dx_x_h = (num_X) => {
    // ідем по стовбах
    const arr_c = arr.map((item) => item[num_X]);
    const x_min = Math.min(...arr_c);
    const x0 = (Math.max(...arr_c) + x_min) / 2;
    const dx = x0 - x_min;
    return {
        x0: x0,
        dx: dx,
        x_h: arr_c.map((x) => (x - x0) / dx)
    }
}

// num -> номер рядка
Y = (num) => arr[num].map((arr_x, i) => arr_x * arr_a[i + 1])
                     .reduce((a, b) => a + b, arr_a[0]);

//попитка вивести це все
draw_the_answer = () => {
    let x1 = x0_dx_x_h(0);
    let x2 = x0_dx_x_h(1);
    let x3 = x0_dx_x_h(2);
    let arr_y = arr.map((item,i) => Y(i));
    let Y_et = arr_a[0] + arr_a[1] * x1.x0 + arr_a[2] * x2.x0 + arr_a[3] * x3.x0;
    let answer_1 = "";
    for (let i = 0; i < 8; i++) {
        answer_1 += "</tr> <th>" + (i + 1) + "</th>";
        arr[i].map((item) => answer_1 += "<th>" + item + "</th>");
        answer_1 += "<th>" + arr_y[i] + "</th>";
        answer_1 += "<th>      </th>";
        answer_1 += "<th>" + x1.x_h[i] + "</th>";
        answer_1 += "<th>" + x2.x_h[i] + "</th>";
        answer_1 += "<th>" + x3.x_h[i] + "</th>";
        answer_1 += "<tr>\n";
    }
    return "<table id='tab'>\n" +
        "        <tr>\n" +
        "            <th> № </th>\n" +
        "            <th> X1 </th>\n" +
        "            <th> X2 </th>\n" +
        "            <th> X3 </th>\n" +
        "            <th> Y </th>\n" +
        "            <th>      </th>\n" +
        "            <th> Xh1 </th>\n" +
        "            <th> Xh2 </th>\n" +
        "            <th> Xh3 </th>\n" +
        "        </tr>\n" +
                answer_1 +
        "         <tr> " +
        "            <th> x0 </th>" +
        "            <th>" + x1.x0 + "</th>" +
        "            <th>" + x2.x0 + "</th>" +
        "            <th>" + x3.x0 + "</th>" +
        "            <th>" + Y_et + "</th>" +
        "         </tr> " +
        "         <tr> " +
        "            <th> dx </th>" +
        "            <th>" + x1.dx + "</th>" +
        "            <th>" + x2.dx + "</th>" +
        "            <th>" + x3.dx + "</th>" +
        "         </tr> " +
        "    </table>" +
        "<h2><br> max(Y) = " + Math.max(...arr_y) + "</br></h2>"

}
